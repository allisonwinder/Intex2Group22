// <auto-generated />
using System;
using Intex2Group22.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Intex2Group22.Migrations.intexmummies
{
    [DbContext(typeof(intexmummiesContext))]
    [Migration("20230413180446_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("excelimporter$template_nr_mxseq");

            modelBuilder.HasSequence("system$filedocument_fileid_mxseq");

            modelBuilder.HasSequence("system$queuedtask_sequence_mxseq");

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.Analysis", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<int?>("Analysisid")
                        .HasColumnType("integer")
                        .HasColumnName("analysisid");

                    b.Property<int?>("Analysistype")
                        .HasColumnType("integer")
                        .HasColumnName("analysistype");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("Doneby")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("doneby");

                    b.HasKey("Id");

                    b.ToTable("analysis", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.AnalysisTextile", b =>
                {
                    b.Property<long>("MainAnalysisid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$analysisid");

                    b.Property<long>("MainTextileid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$textileid");

                    b.HasKey("MainAnalysisid", "MainTextileid")
                        .HasName("main$analysis_textile_pkey");

                    b.HasIndex(new[] { "MainTextileid", "MainAnalysisid" }, "idx_main$analysis_textile_main$textile_main$analysis");

                    b.ToTable("analysis_textile", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.Artifactfagelgamousregister", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Coordinateset")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("coordinateset");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("Photographed")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("photographed");

                    b.Property<string>("Registernum")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("registernum");

                    b.HasKey("Id");

                    b.ToTable("artifactfagelgamousregister", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.ArtifactfagelgamousregisterBurialmain", b =>
                {
                    b.Property<long>("MainArtifactfagelgamousregisterid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$artifactfagelgamousregisterid");

                    b.Property<long>("MainBurialmainid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$burialmainid");

                    b.HasKey("MainArtifactfagelgamousregisterid", "MainBurialmainid")
                        .HasName("main$artifactfagelgamousregister_burialmain_pkey");

                    b.HasIndex(new[] { "MainBurialmainid", "MainArtifactfagelgamousregisterid" }, "idx_main$artifactfagelgamousregister_burialmain");

                    b.ToTable("artifactfagelgamousregister_burialmain", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.Artifactkomaushimregister", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Currentlocation")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("currentlocation");

                    b.Property<string>("Date")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Dimensions")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("dimensions");

                    b.Property<DateTime?>("Entrydate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("entrydate");

                    b.Property<string>("Excavatornum")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("excavatornum");

                    b.Property<string>("Finder")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("finder");

                    b.Property<string>("Material")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("material");

                    b.Property<string>("Number")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("number");

                    b.Property<string>("Photos")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("photos");

                    b.Property<string>("Position")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("position");

                    b.Property<string>("Provenance")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("provenance");

                    b.Property<string>("Qualityphotos")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("qualityphotos");

                    b.Property<string>("Rehousedto")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("rehousedto");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("remarks");

                    b.HasKey("Id");

                    b.ToTable("artifactkomaushimregister", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.ArtifactkomaushimregisterBurialmain", b =>
                {
                    b.Property<long>("MainArtifactkomaushimregisterid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$artifactkomaushimregisterid");

                    b.Property<long>("MainBurialmainid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$burialmainid");

                    b.HasKey("MainArtifactkomaushimregisterid", "MainBurialmainid")
                        .HasName("main$artifactqumoshimregistrar_burialmain_pkey");

                    b.HasIndex(new[] { "MainBurialmainid", "MainArtifactkomaushimregisterid" }, "idx_main$artifactkomaushimregister_burialmain");

                    b.ToTable("artifactkomaushimregister_burialmain", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique();

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Intex2Group22.Models.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Intex2Group22.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique();

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Intex2Group22.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Intex2Group22.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Intex2Group22.Models.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Intex2Group22.Models.Biological", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<int?>("Bagnumber")
                        .HasColumnType("integer")
                        .HasColumnName("bagnumber");

                    b.Property<int?>("Clusternumber")
                        .HasColumnType("integer")
                        .HasColumnName("clusternumber");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("Initials")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("initials");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("notes");

                    b.Property<string>("Previouslysampled")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("previouslysampled");

                    b.Property<int?>("Racknumber")
                        .HasColumnType("integer")
                        .HasColumnName("racknumber");

                    b.HasKey("Id");

                    b.ToTable("biological", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.BiologicalC14", b =>
                {
                    b.Property<long>("MainBiologicalid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$biologicalid");

                    b.Property<long>("MainC14id")
                        .HasColumnType("bigint")
                        .HasColumnName("main$c14id");

                    b.HasKey("MainBiologicalid", "MainC14id")
                        .HasName("main$biological_c14_pkey");

                    b.HasIndex(new[] { "MainC14id", "MainBiologicalid" }, "idx_main$biological_c14_main$c14_main$biological");

                    b.ToTable("biological_c14", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.Bodyanalysischart", b =>
                {
                    b.Property<string>("Burialid")
                        .HasColumnType("character varying")
                        .HasColumnName("burialid");

                    b.Property<string>("Area")
                        .HasColumnType("character varying")
                        .HasColumnName("area");

                    b.Property<string>("Burialnumber")
                        .HasColumnType("character varying")
                        .HasColumnName("burialnumber");

                    b.Property<string>("CariesPeriodontalDisease")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("caries_periodontal_disease");

                    b.Property<string>("Dateofexamination")
                        .HasColumnType("character varying")
                        .HasColumnName("dateofexamination");

                    b.Property<string>("Dorsalpitting")
                        .HasColumnType("character varying")
                        .HasColumnName("dorsalpitting");

                    b.Property<string>("Eastwest")
                        .HasColumnType("character varying")
                        .HasColumnName("eastwest");

                    b.Property<string>("Estimatestature")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("estimatestature");

                    b.Property<string>("Femur")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("femur");

                    b.Property<string>("Femurheaddiameter")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("femurheaddiameter");

                    b.Property<double?>("Femurlength")
                        .HasColumnType("double precision")
                        .HasColumnName("femurlength");

                    b.Property<string>("Gonion")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("gonion");

                    b.Property<string>("Haircolor")
                        .HasColumnType("character varying")
                        .HasColumnName("haircolor");

                    b.Property<string>("Humerus")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("humerus");

                    b.Property<string>("Humerusheaddiameter")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("humerusheaddiameter");

                    b.Property<double?>("Humeruslength")
                        .HasColumnType("double precision")
                        .HasColumnName("humeruslength");

                    b.Property<string>("Lambdoidsuture")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("lambdoidsuture");

                    b.Property<string>("MedicalIpRamus")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("medical_ip_ramus");

                    b.Property<string>("Northsouth")
                        .HasColumnType("character varying")
                        .HasColumnName("northsouth");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("Nuchalcrest")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("nuchalcrest");

                    b.Property<string>("Observations")
                        .HasColumnType("character varying")
                        .HasColumnName("observations");

                    b.Property<string>("Orbitedge")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("orbitedge");

                    b.Property<string>("Osteophytosis")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("osteophytosis");

                    b.Property<string>("Parietalblossing")
                        .HasColumnType("character varying")
                        .HasColumnName("parietalblossing");

                    b.Property<int?>("Perservationindex")
                        .HasColumnType("integer")
                        .HasColumnName("perservationindex");

                    b.Property<string>("Preauricularsulcus")
                        .HasColumnType("character varying")
                        .HasColumnName("preauricularsulcus");

                    b.Property<string>("Pubicbone")
                        .HasColumnType("character varying")
                        .HasColumnName("pubicbone");

                    b.Property<string>("Robust")
                        .HasColumnType("character varying")
                        .HasColumnName("robust");

                    b.Property<string>("Sciaticnotch")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("sciaticnotch");

                    b.Property<string>("Sphenooccipitalsynchondrosis")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("sphenooccipitalsynchondrosis");

                    b.Property<string>("Squamossuture")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("squamossuture");

                    b.Property<int?>("Squareeastwest")
                        .HasColumnType("integer")
                        .HasColumnName("squareeastwest");

                    b.Property<int?>("Squarenorthsouth")
                        .HasColumnType("integer")
                        .HasColumnName("squarenorthsouth");

                    b.Property<string>("Subpubicangle")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("subpubicangle");

                    b.Property<string>("Supraorbitalridges")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("supraorbitalridges");

                    b.Property<string>("Tibia")
                        .HasColumnType("character varying")
                        .HasColumnName("tibia");

                    b.Property<string>("Toothattrition")
                        .HasColumnType("character varying")
                        .HasColumnName("toothattrition");

                    b.Property<string>("Tootheruption")
                        .HasColumnType("character varying")
                        .HasColumnName("tootheruption");

                    b.Property<string>("Tootheruptionageestimation")
                        .HasColumnType("character varying")
                        .HasColumnName("tootheruptionageestimation");

                    b.Property<string>("Ventralarc")
                        .HasColumnType("character varying")
                        .HasColumnName("ventralarc");

                    b.Property<string>("Zygomaticcrest")
                        .HasColumnType("character varying")
                        .HasColumnName("zygomaticcrest");

                    b.HasKey("Burialid")
                        .HasName("bodyanalysischart_pkey");

                    b.ToTable("bodyanalysischart", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.Book", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Author")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("author");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<string>("Link")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("link");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("books", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.Burialmain", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<string>("Adultsubadult")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("adultsubadult");

                    b.Property<string>("Ageatdeath")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("ageatdeath");

                    b.Property<string>("Area")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("area");

                    b.Property<string>("Burialid")
                        .HasColumnType("character varying")
                        .HasColumnName("burialid");

                    b.Property<string>("Burialmaterials")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("burialmaterials");

                    b.Property<string>("Burialnumber")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("burialnumber");

                    b.Property<string>("Clusternumber")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("clusternumber");

                    b.Property<string>("Dataexpertinitials")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("dataexpertinitials");

                    b.Property<DateTime?>("Dateofexcavation")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dateofexcavation");

                    b.Property<string>("Depth")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("depth");

                    b.Property<string>("Eastwest")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("eastwest");

                    b.Property<string>("Excavationrecorder")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("excavationrecorder");

                    b.Property<string>("Facebundles")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("facebundles");

                    b.Property<string>("Fieldbookexcavationyear")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("fieldbookexcavationyear");

                    b.Property<string>("Fieldbookpage")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("fieldbookpage");

                    b.Property<string>("Goods")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("goods");

                    b.Property<string>("Hair")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("hair");

                    b.Property<string>("Haircolor")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("haircolor");

                    b.Property<string>("Headdirection")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("headdirection");

                    b.Property<string>("Length")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("length");

                    b.Property<string>("Northsouth")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("northsouth");

                    b.Property<string>("Photos")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("photos");

                    b.Property<string>("Preservation")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("preservation");

                    b.Property<string>("Samplescollected")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("samplescollected");

                    b.Property<string>("Sex")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("sex");

                    b.Property<string>("Shaftnumber")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("shaftnumber");

                    b.Property<string>("Southtofeet")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("southtofeet");

                    b.Property<string>("Southtohead")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("southtohead");

                    b.Property<string>("Squareeastwest")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("squareeastwest");

                    b.Property<string>("Squarenorthsouth")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("squarenorthsouth");

                    b.Property<string>("Text")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("text");

                    b.Property<string>("Westtofeet")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("westtofeet");

                    b.Property<string>("Westtohead")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("westtohead");

                    b.Property<string>("Wrapping")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("wrapping");

                    b.HasKey("Id");

                    b.ToTable("burialmain", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.BurialmainBiological", b =>
                {
                    b.Property<long>("MainBurialmainid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$burialmainid");

                    b.Property<long>("MainBiologicalid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$biologicalid");

                    b.HasKey("MainBurialmainid", "MainBiologicalid")
                        .HasName("main$burialmain_biological_pkey");

                    b.HasIndex(new[] { "MainBiologicalid", "MainBurialmainid" }, "idx_main$burialmain_biological_main$biological_main$burialmain");

                    b.ToTable("burialmain_biological", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.BurialmainBodyanalysischart", b =>
                {
                    b.Property<long>("MainBurialmainid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$burialmainid");

                    b.Property<long>("MainBodyanalysischartid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$bodyanalysischartid");

                    b.HasKey("MainBurialmainid", "MainBodyanalysischartid")
                        .HasName("main$burialmain_bodyanalysischart_pkey");

                    b.HasIndex(new[] { "MainBodyanalysischartid", "MainBurialmainid" }, "idx_main$burialmain_bodyanalysischart");

                    b.ToTable("burialmain_bodyanalysischart", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.BurialmainCranium", b =>
                {
                    b.Property<long>("MainBurialmainid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$burialmainid");

                    b.Property<long>("MainCraniumid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$craniumid");

                    b.HasKey("MainBurialmainid", "MainCraniumid")
                        .HasName("main$burialmain_cranium_pkey");

                    b.HasIndex(new[] { "MainCraniumid", "MainBurialmainid" }, "idx_main$burialmain_cranium_main$cranium_main$burialmain");

                    b.ToTable("burialmain_cranium", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.BurialmainTextile", b =>
                {
                    b.Property<long>("MainBurialmainid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$burialmainid");

                    b.Property<long>("MainTextileid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$textileid");

                    b.HasKey("MainBurialmainid", "MainTextileid")
                        .HasName("main$burialmain_textile_pkey");

                    b.HasIndex(new[] { "MainTextileid", "MainBurialmainid" }, "idx_main$burialmain_textile_main$textile_main$burialmain");

                    b.ToTable("burialmain_textile", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.C14", b =>
                {
                    b.Property<string>("Burialid")
                        .HasColumnType("character varying")
                        .HasColumnName("burialid");

                    b.Property<int?>("Agebp")
                        .HasColumnType("integer")
                        .HasColumnName("agebp");

                    b.Property<string>("Area")
                        .HasColumnType("character varying")
                        .HasColumnName("area");

                    b.Property<string>("Burialnumber")
                        .HasColumnType("character varying")
                        .HasColumnName("burialnumber");

                    b.Property<int?>("Calendarmax")
                        .HasColumnType("integer")
                        .HasColumnName("calendarmax");

                    b.Property<int?>("Calendarmin")
                        .HasColumnType("integer")
                        .HasColumnName("calendarmin");

                    b.Property<string>("Description")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("description");

                    b.Property<string>("Eastwest")
                        .HasColumnType("character varying")
                        .HasColumnName("eastwest");

                    b.Property<string>("Maxtimeperiod")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("maxtimeperiod");

                    b.Property<string>("Mintimeperiod")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("mintimeperiod");

                    b.Property<string>("Northsouth")
                        .HasColumnType("character varying")
                        .HasColumnName("northsouth");

                    b.Property<string>("Squareeastwest")
                        .HasColumnType("character varying")
                        .HasColumnName("squareeastwest");

                    b.Property<string>("Squarenorthsouth")
                        .HasColumnType("character varying")
                        .HasColumnName("squarenorthsouth");

                    b.HasKey("Burialid")
                        .HasName("c14_pkey");

                    b.ToTable("c14", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.Color", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<int?>("Colorid")
                        .HasColumnType("integer")
                        .HasColumnName("colorid");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("color", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.ColorTextile", b =>
                {
                    b.Property<long>("MainColorid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$colorid");

                    b.Property<long>("MainTextileid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$textileid");

                    b.HasKey("MainColorid", "MainTextileid")
                        .HasName("main$color_textile_pkey");

                    b.HasIndex(new[] { "MainTextileid", "MainColorid" }, "idx_main$color_textile_main$textile_main$color");

                    b.ToTable("color_textile", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.Cranium", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<decimal?>("AlphaCore")
                        .HasPrecision(28, 8)
                        .HasColumnType("numeric(28,8)")
                        .HasColumnName("alpha_core");

                    b.Property<decimal?>("BasionBregmaHeight")
                        .HasPrecision(28, 8)
                        .HasColumnType("numeric(28,8)")
                        .HasColumnName("basion_bregma_height");

                    b.Property<decimal?>("BasionNasion")
                        .HasPrecision(28, 8)
                        .HasColumnType("numeric(28,8)")
                        .HasColumnName("basion_nasion");

                    b.Property<decimal?>("BasionProsthionLength")
                        .HasPrecision(28, 8)
                        .HasColumnType("numeric(28,8)")
                        .HasColumnName("basion_prosthion_length");

                    b.Property<decimal?>("BizygomaticDiameter")
                        .HasPrecision(28, 8)
                        .HasColumnType("numeric(28,8)")
                        .HasColumnName("bizygomatic_diameter");

                    b.Property<decimal?>("InterobitalBreadth")
                        .HasPrecision(28, 8)
                        .HasColumnType("numeric(28,8)")
                        .HasColumnName("interobital_breadth");

                    b.Property<decimal?>("InterorbitalBreadth")
                        .HasPrecision(28, 8)
                        .HasColumnType("numeric(28,8)")
                        .HasColumnName("interorbital_breadth");

                    b.Property<decimal?>("InterorbitalSubtense")
                        .HasPrecision(28, 8)
                        .HasColumnType("numeric(28,8)")
                        .HasColumnName("interorbital_subtense");

                    b.Property<decimal?>("MaxNasalBreadth")
                        .HasPrecision(28, 8)
                        .HasColumnType("numeric(28,8)")
                        .HasColumnName("max_nasal_breadth");

                    b.Property<decimal?>("Maxcraniumbreadth")
                        .HasPrecision(28, 8)
                        .HasColumnType("numeric(28,8)")
                        .HasColumnName("maxcraniumbreadth");

                    b.Property<decimal?>("Maxcraniumlength")
                        .HasPrecision(28, 8)
                        .HasColumnType("numeric(28,8)")
                        .HasColumnName("maxcraniumlength");

                    b.Property<decimal?>("MidOrbitalBreadth")
                        .HasPrecision(28, 8)
                        .HasColumnType("numeric(28,8)")
                        .HasColumnName("mid_orbital_breadth");

                    b.Property<decimal?>("MidOrbitalSubtense")
                        .HasPrecision(28, 8)
                        .HasColumnType("numeric(28,8)")
                        .HasColumnName("mid_orbital_subtense");

                    b.Property<decimal?>("NasionProsthionUpper")
                        .HasPrecision(28, 8)
                        .HasColumnType("numeric(28,8)")
                        .HasColumnName("nasion_prosthion_upper");

                    b.Property<decimal?>("NasoAlphaSubtense")
                        .HasPrecision(28, 8)
                        .HasColumnType("numeric(28,8)")
                        .HasColumnName("naso_alpha__subtense");

                    b.HasKey("Id");

                    b.ToTable("cranium", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.Decoration", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<int?>("Decorationid")
                        .HasColumnType("integer")
                        .HasColumnName("decorationid");

                    b.Property<string>("Value")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("decoration", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.DecorationTextile", b =>
                {
                    b.Property<long>("MainDecorationid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$decorationid");

                    b.Property<long>("MainTextileid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$textileid");

                    b.HasKey("MainDecorationid", "MainTextileid")
                        .HasName("main$decoration_textile_pkey");

                    b.HasIndex(new[] { "MainTextileid", "MainDecorationid" }, "idx_main$decoration_textile_main$textile_main$decoration");

                    b.ToTable("decoration_textile", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.Dimension", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<int?>("Dimensionid")
                        .HasColumnType("integer")
                        .HasColumnName("dimensionid");

                    b.Property<string>("Dimensiontype")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("dimensiontype");

                    b.Property<string>("Value")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("dimension", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.DimensionTextile", b =>
                {
                    b.Property<long>("MainDimensionid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$dimensionid");

                    b.Property<long>("MainTextileid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$textileid");

                    b.HasKey("MainDimensionid", "MainTextileid")
                        .HasName("main$dimension_textile_pkey");

                    b.HasIndex(new[] { "MainTextileid", "MainDimensionid" }, "idx_main$dimension_textile_main$textile_main$dimension");

                    b.ToTable("dimension_textile", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.Master", b =>
                {
                    b.ToTable("master", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.Newsarticle", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Author")
                        .HasColumnType("character varying")
                        .HasColumnName("author");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .HasColumnType("character varying")
                        .HasColumnName("title");

                    b.Property<string>("Url")
                        .HasColumnType("character varying")
                        .HasColumnName("url");

                    b.Property<string>("Urltoimage")
                        .HasColumnType("character varying")
                        .HasColumnName("urltoimage");

                    b.HasKey("Id");

                    b.ToTable("newsarticle", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.PhotodataTextile", b =>
                {
                    b.Property<long>("MainPhotodataid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$photodataid");

                    b.Property<long>("MainTextileid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$textileid");

                    b.HasKey("MainPhotodataid", "MainTextileid")
                        .HasName("main$photodata_textile_pkey");

                    b.HasIndex(new[] { "MainTextileid", "MainPhotodataid" }, "idx_main$photodata_textile_main$textile_main$photodata");

                    b.ToTable("photodata_textile", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.Photodatum", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Filename")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("filename");

                    b.Property<int?>("Photodataid")
                        .HasColumnType("integer")
                        .HasColumnName("photodataid");

                    b.Property<string>("Url")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.ToTable("photodata", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.Photoform", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Area")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("area");

                    b.Property<string>("Burialnumber")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("burialnumber");

                    b.Property<string>("Eastwest")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("eastwest");

                    b.Property<string>("Filename")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("filename");

                    b.Property<string>("Northsouth")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("northsouth");

                    b.Property<DateTime?>("Photodate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("photodate");

                    b.Property<string>("Photographer")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("photographer");

                    b.Property<string>("Squareeastwest")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("squareeastwest");

                    b.Property<string>("Squarenorthsouth")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("squarenorthsouth");

                    b.Property<string>("Tableassociation")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tableassociation");

                    b.HasKey("Id");

                    b.ToTable("photoform", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.Structure", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<int?>("Structureid")
                        .HasColumnType("integer")
                        .HasColumnName("structureid");

                    b.Property<string>("Value")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("structure", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.StructureTextile", b =>
                {
                    b.Property<long>("MainStructureid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$structureid");

                    b.Property<long>("MainTextileid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$textileid");

                    b.HasKey("MainStructureid", "MainTextileid")
                        .HasName("main$structure_textile_pkey");

                    b.HasIndex(new[] { "MainTextileid", "MainStructureid" }, "idx_main$structure_textile_main$textile_main$structure");

                    b.ToTable("structure_textile", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.Teammember", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Bio")
                        .HasColumnType("character varying")
                        .HasColumnName("bio");

                    b.Property<string>("Membername")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("membername");

                    b.HasKey("Id");

                    b.ToTable("teammember", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.Textile", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Burialnumber")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("burialnumber");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<string>("Direction")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("direction");

                    b.Property<string>("Estimatedperiod")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("estimatedperiod");

                    b.Property<string>("Locale")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("locale");

                    b.Property<DateTime?>("Photographeddate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("photographeddate");

                    b.Property<DateTime?>("Sampledate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("sampledate");

                    b.Property<int?>("Textileid")
                        .HasColumnType("integer")
                        .HasColumnName("textileid");

                    b.HasKey("Id");

                    b.ToTable("textile", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.Textilefunction", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<int?>("Textilefunctionid")
                        .HasColumnType("integer")
                        .HasColumnName("textilefunctionid");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("textilefunction", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.TextilefunctionTextile", b =>
                {
                    b.Property<long>("MainTextilefunctionid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$textilefunctionid");

                    b.Property<long>("MainTextileid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$textileid");

                    b.HasKey("MainTextilefunctionid", "MainTextileid")
                        .HasName("main$textilefunction_textile_pkey");

                    b.HasIndex(new[] { "MainTextileid", "MainTextilefunctionid" }, "idx_main$textilefunction_textile");

                    b.ToTable("textilefunction_textile", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.Yarnmanipulation", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Angle")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("angle");

                    b.Property<string>("Component")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("component");

                    b.Property<string>("Count")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("count");

                    b.Property<string>("Direction")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("direction");

                    b.Property<string>("Manipulation")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("manipulation");

                    b.Property<string>("Material")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("material");

                    b.Property<string>("Ply")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ply");

                    b.Property<string>("Thickness")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("thickness");

                    b.Property<int?>("Yarnmanipulationid")
                        .HasColumnType("integer")
                        .HasColumnName("yarnmanipulationid");

                    b.HasKey("Id");

                    b.ToTable("yarnmanipulation", (string)null);
                });

            modelBuilder.Entity("Intex2Group22.Models.YarnmanipulationTextile", b =>
                {
                    b.Property<long>("MainYarnmanipulationid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$yarnmanipulationid");

                    b.Property<long>("MainTextileid")
                        .HasColumnType("bigint")
                        .HasColumnName("main$textileid");

                    b.HasKey("MainYarnmanipulationid", "MainTextileid")
                        .HasName("main$yarnmanipulation_textile_pkey");

                    b.HasIndex(new[] { "MainTextileid", "MainYarnmanipulationid" }, "idx_main$yarnmanipulation_textile");

                    b.ToTable("yarnmanipulation_textile", (string)null);
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("Intex2Group22.Models.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Intex2Group22.Models.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Intex2Group22.Models.AspNetRoleClaim", b =>
                {
                    b.HasOne("Intex2Group22.Models.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Intex2Group22.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("Intex2Group22.Models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Intex2Group22.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("Intex2Group22.Models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Intex2Group22.Models.AspNetUserToken", b =>
                {
                    b.HasOne("Intex2Group22.Models.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Intex2Group22.Models.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("Intex2Group22.Models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
